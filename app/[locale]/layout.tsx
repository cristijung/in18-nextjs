
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../globals.css"; 
import { NextIntlClientProvider } from 'next-intl';
import { notFound } from 'next/navigation';
import { getMessages } from 'next-intl/server';

import { locales, type Locale } from '../../i18n'; 

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Projeto i18n",
  description: "Generated by create next app",
};

interface RootLayoutProps {
  children: React.ReactNode;
  params: {
    locale: string; 
  };
}

export default async function RootLayout({
  children,
  params: { locale } 
}: Readonly<RootLayoutProps>) {  
  if (!locales.includes(locale as Locale)) {    
    notFound();
  }
  
  const validatedLocale = locale as Locale;  
  const messages = await getMessages({ locale: validatedLocale });

  return (
    <html lang={validatedLocale}> {/* o locale validado aqui */}
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider locale={validatedLocale} messages={messages}> {/* e aqui */}
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}